{{$PROMETHEUS_SCRAPE_KUBELETS := DefaultParam .PROMETHEUS_SCRAPE_KUBELETS false}}
{{$PROMETHEUS_SCRAPE_WINDOWS_NODES := DefaultParam .PROMETHEUS_SCRAPE_WINDOWS_NODES false}}

apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    prometheus: k8s
  name: k8s
  namespace: monitoring
spec:
  logLevel: debug
  enableAdminAPI: true
  baseImage: gcr.io/k8s-testimages/quay.io/prometheus/prometheus
  nodeSelector:
    kubernetes.io/os: linux
  replicas: 1
  resources:
    requests:
      cpu: {{AddInt 200 (MultiplyInt 500 (DivideInt .Nodes 1000))}}m
      {{if $PROMETHEUS_SCRAPE_KUBELETS}}
      memory: 10Gi
      {{else}}
      # Start with 2Gi and add 2Gi for each 1K nodes.
      memory: {{MultiplyInt 2 (AddInt 1 (DivideInt .Nodes 1000))}}Gi
      {{end}}
    limits:
      {{if $PROMETHEUS_SCRAPE_KUBELETS}}
      memory: 10Gi
      {{else}}
      # Start with 2Gi and add 2Gi for each 1K nodes.
      memory: {{MultiplyInt 2 (AddInt 1 (DivideInt .Nodes 1000))}}Gi
      {{end}}
  ruleSelector:
    matchLabels:
      prometheus: k8s
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  tolerations:
  - key: "monitoring"
    operator: "Exists"
    effect: "NoSchedule"
  serviceAccountName: prometheus-k8s
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  version: v2.25.0
  retention: 7d
  # Removed the storage section as we don't require a PVC
  query:
    maxSamples: 100000000
  {{if $PROMETHEUS_SCRAPE_WINDOWS_NODES}}
  additionalScrapeConfigs:
    name: windows-scrape-configs
    key: windows-scrape-configs.yaml
  {{end}}